<!DOCTYPE html>
<html>
    <head>
        <title>Upshot Scenario Samples</title>
        <link href="Styles/scenarios.css" rel="stylesheet" type="text/css" />
        <script src="http://ajax.microsoft.com/ajax/jquery/jquery-1.6.2.js" type="text/javascript"></script>
        <script src="Scripts/knockout-2.0.0.js" type="text/javascript"></script>
        <script src="Scripts/UpshotScripts/upshot.js" type="text/javascript"></script>
        <script src="Scripts/UpshotScripts/Upshot.Compat.Knockout.js" type="text/javascript"></script>
        <script src="Scripts/constants.js" type="text/javascript"></script>
        <script type="text/javascript">

            $(function () {
                var dataSource = upshot.RemoteDataSource({
                    providerParameters: { url: constants.serviceUrl, operationName: "GetProducts" },
                    provider: constants.provider,
                    entityType: "Product:#Sample.Models"
                });

                function AppViewModel(dataSource) {
                    var self = this;

                    // Public data properties
                    self.products = dataSource.getEntities();
                    self.pageSize = ko.observable(3);
                    self.currentPage = ko.observable(1);
                    self.totalPages = ko.observable(0);
                    self.sort = ko.observable("Rating");
                    self.maxPrice = ko.observable(10000);

                    // Public operations
                    self.navigatePrev = function () {
                        self.currentPage(self.currentPage() - 1);
                    };
                    self.navigateNext = function () {
                        self.currentPage(self.currentPage() + 1);
                    };

                    // When sort/maxPrice/pageSize options change, always return to the first page
                    var navigateFirst = function () { self.currentPage(1) };
                    self.sort.subscribe(navigateFirst);
                    self.maxPrice.subscribe(navigateFirst);
                    self.pageSize.subscribe(navigateFirst);

                    // Respond to changes on currentPage/pageSize/sort/maxPrice by reloading the data
                    ko.computed(function () {
                        dataSource
                            .setPaging({ skip: (self.currentPage() - 1) * self.pageSize(), take: self.pageSize(), includeTotalCount: true })
                            .setSort({ property: self.sort() })
                            .setFilter({ property: "Price", operator: "<", value: parseInt(self.maxPrice() || 10000) })
                            .refresh(function (result, total) {
                                self.totalPages(Math.ceil(total / self.pageSize()));
                            });
                    }).extend({ throttle: 1 }); // Throttle to ensure sequential parameter changes cause only one Ajax request
                };

                ko.applyBindings(new AppViewModel(dataSource));
            });
        </script>
    </head>
    <body>
        <a href="index.htm">&laquo; Home</a> |
        <a href="ko3-simpleupdate.htm">Next &raquo;</a>
        <p>
            <b>Scenario:</b> Building upon the previous sample, this sample demonstrates how
            to add server-side paging, sorting and filtering to a displayed list of data.
        </p>

        <table>
            <caption>Page/Sort/Filter</caption>
            <tr>
                <th>Sort by</th>
                <td>
                    <select id="sort" data-bind="value: sort">
                        <option value="Rating">Rating</option>
                        <option value="Name">Name</option>
                        <option value="Manufacturer">Manufacturer</option>
                        <option value="Price">Price</option>
                    </select>
                </td>
            </tr>
            <tr>
                <th>Price under</th>
                <td><input id="price" data-bind="value: maxPrice" /></td>
            </tr>
            <tr>
                <th>Page size</th>
                <td><select data-bind="value: pageSize, options: [1, 3, 5, 10]"></select></td>
            </tr>
            <tr>
                <th>Pages</th>
                <td>
                    <button id="prev" data-bind="click: navigatePrev, disable: currentPage() === 1">prev</button>
                    <button id="next" data-bind="click: navigateNext, disable: currentPage() === totalPages()">next</button>
                    <span>
                        page #<b id="currentPage"data-bind="text: currentPage">&nbsp;</b>
                        of <b id="totalPages" data-bind="text: totalPages">&nbsp;</b>
                    </span>
                </td>
            </tr>
        </table>

        <table>
            <caption>Product Inventory Table</caption>
            <tr>
                <th>Manufacturer</th>
                <th>Name</th>
                <th>Price</th>
                <th>Rating</th>
            </tr>
            <tbody data-bind="foreach: products">
                <tr class="product">
                    <td data-bind="text: Manufacturer"></td>
                    <td data-bind="text: Name" class="name"></td>
                    <td data-bind="text: '$' + Price().toFixed(2)" class="price"></td>
                    <td data-bind="text: Rating"></td>
                </tr>
            </tbody>
        </table>
    </body>
</html>