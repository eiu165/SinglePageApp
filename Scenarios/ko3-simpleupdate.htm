<!DOCTYPE html>
<html>
    <head>
        <title>Upshot Scenario Samples</title>
        <link href="Styles/scenarios.css" rel="stylesheet" type="text/css" />
        <script src="http://ajax.microsoft.com/ajax/jquery/jquery-1.6.2.js" type="text/javascript"></script>
        <script src="Scripts/knockout-2.0.0.js" type="text/javascript"></script>
        <script src="Scripts/UpshotScripts/upshot.js" type="text/javascript"></script>
        <script src="Scripts/UpshotScripts/Upshot.Compat.Knockout.js" type="text/javascript"></script>
        <script src="Scripts/constants.js" type="text/javascript"></script>
        <script type="text/javascript">
            $(function () {
                var productType = "Product:#Sample.Models";

                // Class to represent each product instance
                function Product(properties) {
                    var self = this;
                    upshot.map(properties, productType, self); // Add properties from the server
                    upshot.addEntityProperties(self); // Add properties managed by upshot
                }

                // Data source representing the "GetProducts" operation
                var dataSource = upshot.RemoteDataSource({
                    providerParameters: { url: constants.serviceUrl, operationName: "GetProducts" },
                    provider: constants.provider,
                    entityType: productType,
                    mapping: Product
                }).refresh();

                function AppViewModel(dataSource) {
                    var self = this;

                    // Public data properties
                    self.products = dataSource.getEntities();
                    self.errorText = ko.observable();

                    // Error handling
                    dataSource.bind({
                        commitStart: function () { self.errorText(null) },
                        commitError: function (httpStatus, errorText) { self.errorText(errorText) },
                        refreshError: function (httpStatus, errorText) { self.errorText(errorText) }
                    });
                };

                ko.applyBindings(new AppViewModel(dataSource));
            });
        </script>
    </head>
    <body>
        <a href="index.htm">&laquo; Home</a> |
        <a href="ko4-batchupdate.htm">Next &raquo;</a>
        <p>
            <b>Scenario:</b> This sample demonstrates simple, in-place editing of data entities
            loaded from a service. Adjust the rating of products as they’re displayed in a table.
        </p>

        <table>
            <caption>Product Inventory Table</caption>
            <tr>
                <th>Manufacturer</th>
                <th>Name</th>
                <th>Price</th>
                <th>Rating</th>
            </tr>
            <tbody data-bind="foreach: products">
                <tr class="product" data-bind="css: { updating: IsChanged, error: EntityError }">
                    <td data-bind="text: Manufacturer"></td>
                    <td data-bind="text: Name" class="name"></td>
                    <td data-bind="text: '$' + Price().toFixed(2)" class="price"></td>
                    <td>
                        Rating: 
                        <select class="rating" data-bind="options: [ 0, 1, 2, 3, 4, 5 ], value: Rating"></select>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="error" data-bind="text: errorText"></div>
    </body>
</html>