<!DOCTYPE html>
<html>
    <head>
        <title>Upshot Scenario Samples</title>
        <link href="Styles/scenarios.css" rel="stylesheet" type="text/css" />
        <style type="text/css">label.error { display: block }</style>
        <script src="http://ajax.microsoft.com/ajax/jquery/jquery-1.6.2.js" type="text/javascript"></script>
        <script src="http://ajax.microsoft.com/ajax/jquery.validate/1.8.1/jquery.validate.js" type="text/javascript"></script>
        <script src="Scripts/knockout-2.0.0.js" type="text/javascript"></script>
        <script src="Scripts/UpshotScripts/upshot.js" type="text/javascript"></script>
        <script src="Scripts/UpshotScripts/Upshot.Compat.Knockout.js" type="text/javascript"></script>
        <script src="Scripts/bindings.js" type="text/javascript"></script>
        <script src="Scripts/constants.js" type="text/javascript"></script>
        <script type="text/javascript">
            $(function () {

                var productType = "Product:#Sample.Models";

                function Product(properties) {
                    var self = this;
                    upshot.map(properties, productType, self); // Add properties from the server
                    upshot.addEntityProperties(self); // Add properties managed by upshot
                }

                // Bind array with data source and refresh.
                var dataSource = upshot.RemoteDataSource({
                    providerParameters: { url: constants.serviceUrl, operationName: "GetProducts" },
                    provider: constants.provider,
                    entityType: productType,
                    mapping: Product,
                    bufferChanges: true
                }).refresh();

                var AppViewModel = function (dataSource) {
                    var self = this;

                    // Public data properties
                    self.products = dataSource.getEntities();
                    self.selectedProduct = ko.observable();
                    self.validationConfig = dataSource.getEntityValidationRules();
                    self.hasAnyChanges = ko.computed(function () {
                        var isChanged = function (p) { return p.IsChanged() }
                        return ko.utils.arrayFirst(self.products(), isChanged) !== null;
                    });

                    // Public operations
                    self.commit = function () {
                        dataSource.commitChanges();
                        self.selectedProduct(null);
                    };
                    self.revert = function () {
                        dataSource.revertChanges();
                        self.selectedProduct(null);
                    };
                };

                ko.applyBindings(new AppViewModel(dataSource));
            });

        </script>
    </head>
    <body>
        <a href="index.htm">&laquo; Home</a> |
        <a href="ko5-addremove.htm">Next &raquo;</a>
        <p>
            <b>Scenario:</b> This sample demonstrates editing over multiple data entities, where
            edits are submitted to a service in a batch.
        </p>

        <table>
            <caption>Product Inventory Table</caption>
            <tr>
                <th>Manufacturer</th>
                <th>Name</th>
                <th>Price</th>
                <th>Rating</th>
                <th>Action</th>
            </tr>
            <tbody data-bind="foreach: products">
                <tr class="product" data-bind="css: { updating: IsChanged }">
                    <td data-bind="text: Manufacturer"></td>
                    <td data-bind="text: Name" class="name"></td>
                    <td data-bind="text: '$' + Number(Price()).toFixed(2)" class="price"></td>
                    <td><span class="rating" data-bind="text: Rating"></span></td>
                    <td>
                        <button class="editButton" data-bind="click: $parent.selectedProduct, disable: $data === $parent.selectedProduct()">
                            edit
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>

        <p>
            <button class="commitButton" data-bind="click: commit, enable: hasAnyChanges">commit all changes</button>
            <button class="revertButton" data-bind="click: revert, enable: hasAnyChanges">revert all changes</button>
        </p>

        <form data-bind="validate: validationConfig, with: selectedProduct">
            <fieldset>
                <table>
                    <caption>Product Information</caption>
                    <tr>
                        <th>Name</th>
                        <td><input data-bind="value: Name, autovalidate: true" name="Name" /></td>
                    </tr>
                    <tr>
                        <th>Manufacturer</th>
                        <td><input data-bind="value: Manufacturer, autovalidate: true" name="Manufacturer" /></td>
                    </tr>
                    <tr>
                        <th>Rating</th>
                        <td><input data-bind="value: Rating, autovalidate: true" name="Rating" /></td>
                    </tr>
                    <tr>
                        <th>Price</th>
                        <td><input data-bind="value: Price, autovalidate: true" name="Price" /></td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td><input data-bind="value: ProductDescription, autovalidate: true" name="ProductDescription" /></td>
                    </tr>
                </table>
            </fieldset>
        </form>
    </body>
</html>